referrence url: http://www.runoob.com/django/django-tutorial.html

Django install

pip install Django==1.11.7


然后是配置环境变量，将这几个目录添加到系统环境变量中： C:\Python33\Lib\site-packages\django;C:\Python33\Scripts。 
添加完成后就可以使用Django的django-admin.py命令新建工程了。


输入以下命令进行检查:
>>> import django
>>> django.get_version()




创建第一个项目
使用 django-admin.py 来创建 HelloWorld 项目：
django-admin.py startproject HelloWorld
创建完成后我们可以查看下项目的目录结构：
$ cd HelloWorld/
$ tree
.
|-- HelloWorld
|   |-- __init__.py
|   |-- settings.py
|   |-- urls.py
|   `-- wsgi.py
`-- manage.py
目录说明：
HelloWorld: 项目的容器。
manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。
HelloWorld/__init__.py: 一个空文件，告诉 Python 该目录是一个 Python 包。
HelloWorld/settings.py: 该 Django 项目的设置/配置。
HelloWorld/urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站"目录"。
HelloWorld/wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。

接下来我们进入 HelloWorld 目录输入以下命令，启动服务器：
python manage.py runserver 0.0.0.0:8000


TemplateDoesNotExist
关于报错：TemplateDoesNotExist （Django 1.11.6 Python 3.6）
没找到模板的问题一般都较为简单，在print(BASE_DIR)之后发现目录还有一级，再填上就好了。
附上配置：
'DIRS': [os.path.join(BASE_DIR, 'helloworld/templates')],
PS:注意斜杠是 '/'
一个萌新踩过的坑


安装 mysql 驱动，可以执行以下命令安装：
sudo pip install mysqlclient

settings.py 文件中找到 DATABASES 配置项，将其信息修改为：
HelloWorld/HelloWorld/settings.py: 文件代码：
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 或者使用 mysql.connector.django
        'NAME': 'test',
        'USER': 'test',
        'PASSWORD': 'test123',
        'HOST':'localhost',
        'PORT':'3306',
    }
}
这里添加了中文注释，所以你需要在 HelloWorld/settings.py 文件头部添加 # -*- coding: UTF-8 -*-。


创建 APP
Django规定，如果要使用模型，必须要创建一个app。我们使用以下命令创建一个 TestModel 的 app:
django-admin.py startapp TestModel


Django 教程
Django 教程
Django 安装
Django 创建第一个项目
Django 模板
Django 模型
Django 表单
Django Admin 管理工具
Django Nginx+uwsgi 安装配置
 Django 模板 Django 表单 
Django 模型
Django 对各种数据库提供了很好的支持，包括：PostgreSQL、MySQL、SQLite、Oracle。
Django 为这些数据库提供了统一的调用API。 我们可以根据自己业务需求选择不同的数据库。
MySQL 是 Web 应用中最常用的数据库。本章节我们将以 Mysql 作为实例进行介绍。你可以通过本站的 MySQL 教程 了解更多Mysql的基础知识。
如果你没安装 mysql 驱动，可以执行以下命令安装：
sudo pip install mysqlclient
数据库配置
我们在项目的 settings.py 文件中找到 DATABASES 配置项，将其信息修改为：
HelloWorld/HelloWorld/settings.py: 文件代码：
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 或者使用 mysql.connector.django
        'NAME': 'test',
        'USER': 'test',
        'PASSWORD': 'test123',
        'HOST':'localhost',
        'PORT':'3306',
    }
}
这里添加了中文注释，所以你需要在 HelloWorld/settings.py 文件头部添加 # -*- coding: UTF-8 -*-。
上面包含数据库名称和用户的信息，它们与 MySQL 中对应数据库和用户的设置相同。Django 根据这一设置，与 MySQL 中相应的数据库和用户连接起来。
定义模型
创建 APP
Django规定，如果要使用模型，必须要创建一个app。我们使用以下命令创建一个 TestModel 的 app:
django-admin.py startapp TestModel
目录结构如下：
HelloWorld
|-- TestModel
|   |-- __init__.py
|   |-- admin.py
|   |-- models.py
|   |-- tests.py
|   `-- views.py
我们修改 TestModel/models.py 文件，代码如下：
HelloWorld/TestModel/models.py: 文件代码：
# models.py
from django.db import models
 
class Test(models.Model):
    name = models.CharField(max_length=20)
以上的类名代表了数据库表名，且继承了models.Model，类里面的字段代表数据表中的字段(name)，数据类型则由CharField（相当于varchar）、DateField（相当于datetime）， max_length 参数限定长度。
接下来在settings.py中找到INSTALLED_APPS这一项，如下：
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'TestModel',               # 添加此项
)



在命令行中运行：
$ python manage.py migrate   # 创建表结构

$ python manage.py makemigrations TestModel  # 让 Django 知道我们在我们的模型有一些变更
$ python manage.py migrate TestModel   # 创建表结构